openapi: 3.0.0
info:
  version: 1.0.0
  title: Squacker API
servers:
  - url: http://trackerapi-env.eba-ndvpxezg.eu-north-1.elasticbeanstalk.com/api
    description: Production
  - url: http://localhost:8080/api
    description: Development
tags:
  - name: User authentication
  - name: Session information
paths:
  /auth/register:
    post:
      tags:
        - User authentication
      description: Creates new user account
      requestBody:
        required: 'true'
        content:
          application/json:
            schema:
              $ref: '#components/definitions/UserForAuth'
      responses:
        '200':
          description: Successful registration
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                  refreshToken:
                    type: string
                  user:
                    $ref: '#components/schemas/User'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#components/definitions/400Error'
        '500':
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#components/definitions/500Error'
  /auth/login:
    post:
      tags:
        - User authentication
      description: Authenticates user in his account
      requestBody:
        required: 'true'
        content:
          application/json:
            schema:
              $ref: '#components/definitions/UserForAuth'
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                  refreshToken:
                    type: string
                  user:
                    $ref: '#components/schemas/User'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    value: 400
                    example: 400
                  message:
                    type: string
                    example: Validation Error
                  errors:
                    type: array
                    items:
                      type: object
                      example:
                        value: email@email
                        msg: Invalid value
                        param: email
                        location: body
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#components/definitions/404Error'
        '500':
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#components/definitions/500Error'
  /auth/logout:
    post:
      tags:
        - User authentication
      description: Log out user from account
      requestBody:
        required: 'true'
        content:
          application/json:
            schema:
              type: object
              properties:
                refreshToken:
                  type: string
      responses:
        '200':
          description: If deletedCount > 0, logout was successful.
          content:
            application/json:
              schema:
                type: object
                properties:
                  acknowledged:
                    type: boolean
                    example: true
                  deletedCount:
                    type: integer
                    example: 1
  /auth/activate/{activationLink}:
    get:
      tags:
        - User authentication
      description: |-
        Route does not work at the moment. Responses will be added later. 
         Activates user account via link sent to his email
      parameters:
        - in: path
          name: activationLink
          required: 'true'
      responses:
  /auth/refresh:
    post:
      tags:
        - User authentication
      description: Refresh user JWTs
      requestBody:
        required: 'true'
        content:
          application/json:
            schema:
              type: object
              properties:
                refreshToken:
                  type: string
      responses:
        '200':
          description: Tokens successfully refreshed.
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                  refreshToken:
                    type: string
                  user:
                    $ref: '#components/schemas/User'
        '400':
          description: Request body (refreshToken) is not provided
          content:
            application/json:
              schema:
                $ref: '#components/definitions/400Error'
        '404':
          description: Cannot find user with provided token.
          content:
            application/json:
              schema:
                $ref: '#components/definitions/404Error'
  /session:
    post:
      tags:
        - Session information
      description: Creates new track session
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Session'
      responses:
        '200':
          description: Session successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'
        '401':
          description: User is unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/definitions/401Error'
        '500':
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#components/definitions/500Error'
  /session/{session_id}:
    patch:
      tags:
        - Session information
      description: Updates session
      parameters:
        - name: session_id
          in: path
          description: Session id
          required: true
          schema:
            type:
              string
      responses:
        '200':
          description: Returns updated session
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#components/definitions/400Error'
        '401':
          description: User is unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/definitions/401Error'
        '404':
          description: Session not found
          content:
            application/json:
              schema:
                $ref: '#components/definitions/404Error'
        '500':
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#components/definitions/500Error'
components:
  definitions:
    400Error:
      type: object
      properties:
        status:
          type: integer
          example: 400
          value: 400
        message:
          type: string
        errors:
          type: array
          items:
            type: object
    401Error:
      type: object
      properties:
        status:
          type: integer
          example: 401
          value: 401
        message:
          type: string
          example: User is unauthorized
          value: User is unauthorized
        errors:
          type: array
          items:
            type: object
    404Error:
      type: object
      properties:
        status:
          type: integer
          example: 404
          value: 404
        message:
          type: string
          example: Resource *name* is not found
    500Error:
      type: object
      properties:
        status:
          type: integer
          example: 500
          value: 500
        message:
          type: string
          example: Unexpected error
    Lap:
      type: object
      properties:
        lap_number:
          type: integer
        lap_time:
          type: string
    UserForAuth:
      type: object
      properties:
        email:
          type: string
          required: 'true'
        password:
          type: string
          required: 'true'
          minimum length: '3'
          maximum length: '32'
  schemas:
    User:
      type: object
      properties:
        email:
          type: string
        id:
          type: string
        isActivated:
          type: boolean
    Session:
      type: object
      properties:
        id:
          type: string
        user:
          type: string
          required: 'true'
        date:
          nullable: 'true'
          type: string
        laps:
          type: array
          required: 'true'
          items:
            $ref: '#components/definitions/Lap'
        best_lap:
          nullable: 'true'
          type: string
        avg_lap:
          nullable: 'true'
          type: string
        track_length:
          nullable: 'true'
          type: number
          format: float
        note:
          nullable: 'true'
          type: string
          maxLength: 150
        wet:
          nullable: 'true'
          type: boolean
          enum: ['true', 'false']